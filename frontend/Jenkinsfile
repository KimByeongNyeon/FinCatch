pipeline {
    agent any

    environment {
        FRONTEND_BRANCH = 'feature-frontend'
    }

    stages {
        stage('Checkout SCM') {
            steps {
                script {
                    checkout scm
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script{
                    withCredentials([string(credentialsId: 'FRONTEND_IMAGE_NAME', variable: 'FRONTEND_IMAGE_NAME')]) {
                        dir('frontend') {  
                            sh """docker build -t ${FRONTEND_IMAGE_NAME} ."""
                        }
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    withCredentials([
                      usernamePassword(
                          credentialsId: 'DOCKER_CERD_FRONT',
                          usernameVariable: 'DOCKER_HUB_USERNAME',
                          passwordVariable: 'DOCKER_HUB_PASSWORD'
                      ),
                      string(credentialsId: 'FRONTEND_IMAGE_NAME', variable: 'FRONTEND_IMAGE_NAME')
                    ]) {
                        sh """
                            docker login -u ${DOCKER_HUB_USERNAME} -p ${DOCKER_HUB_PASSWORD}
                            docker push ${FRONTEND_IMAGE_NAME}
                            docker logout
                        """
                    }
                }
            }
        }


        stage('Deploy Frontend') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'FRONTEND_IMAGE_NAME', variable: 'FRONTEND_IMAGE_NAME'),
                        string(credentialsId: 'FRONTEND_CONTIANER_NAME', variable: 'FRONTEND_CONTIANER_NAME')    
                    ]) {
                        sh """
                            docker stop ${FRONTEND_CONTIANER_NAME} | true
                            docker rm ${FRONTEND_CONTIANER_NAME} | true
                            docker run -d --name ${FRONTEND_CONTIANER_NAME} \
                                --network fincatch -p 3210:3209 \
                            ${FRONTEND_IMAGE_NAME}
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                withCredentials([string(credentialsId: 'FRONTEND_MM_WEBHOOK_URL', variable: 'FRONTEND_MM_WEBHOOK_URL')]) {
                    def jsonMessage = """{
                        "attachments": [{
                            "text": "**✅ Frontend Build 성공**\\\\n- 상태: SUCCESS\\\\n- [🔗 상세 정보](${env.BUILD_URL})",
                            "color": "#00FF00"
                        }]
                    }"""

                    sh """
                    echo '${jsonMessage}' > mattermost_payload.json
                    cat mattermost_payload.json
                    curl -X POST -H "Content-Type: application/json" --data @mattermost_payload.json '${FRONTEND_MM_WEBHOOK_URL}'
                    rm -f mattermost_payload.json
                    """
                }
            }
        }
        failure {
            script {
                withCredentials([string(credentialsId: 'FRONTEND_MM_WEBHOOK_URL', variable: 'FRONTEND_MM_WEBHOOK_URL')]) {
                    def jsonMessage = """{
                        "attachments": [{
                            "text": "**❌ Frontend Build 실패**\\\\n- 상태: FAILURE\\\\n- [🔗 상세 정보](${env.BUILD_URL}/console) ",
                            "color": "#FF0000"
                        }]
                    }"""

                    sh """
                    echo '${jsonMessage}' > mattermost_payload.json
                    cat mattermost_payload.json
                    curl -X POST -H "Content-Type: application/json" --data @mattermost_payload.json '${FRONTEND_MM_WEBHOOK_URL}'
                    rm -f mattermost_payload.json
                    """
                }
            }
        }
    }
}
